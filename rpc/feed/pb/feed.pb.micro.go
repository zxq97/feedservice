// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/feed/feed.proto

package feed_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FeedServer service

type FeedServerService interface {
	Refresh(ctx context.Context, in *ReFreshRequest, opts ...client.CallOption) (*EmptyResponse, error)
	GetSelfFeed(ctx context.Context, in *GetFeedRequest, opts ...client.CallOption) (*GetFeedResponse, error)
	PushSelfFeed(ctx context.Context, in *PushSelfFeedRequest, opts ...client.CallOption) (*EmptyResponse, error)
	GetFollowFeed(ctx context.Context, in *GetFeedRequest, opts ...client.CallOption) (*GetFeedResponse, error)
	PushFollowFeed(ctx context.Context, opts ...client.CallOption) (FeedServer_PushFollowFeedService, error)
	FollowAfterFeed(ctx context.Context, in *ActionFeedRequest, opts ...client.CallOption) (*EmptyResponse, error)
	UnfollowAfterFeed(ctx context.Context, in *ActionFeedRequest, opts ...client.CallOption) (*EmptyResponse, error)
}

type feedServerService struct {
	c    client.Client
	name string
}

func NewFeedServerService(name string, c client.Client) FeedServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "feed"
	}
	return &feedServerService{
		c:    c,
		name: name,
	}
}

func (c *feedServerService) Refresh(ctx context.Context, in *ReFreshRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "FeedServer.Refresh", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServerService) GetSelfFeed(ctx context.Context, in *GetFeedRequest, opts ...client.CallOption) (*GetFeedResponse, error) {
	req := c.c.NewRequest(c.name, "FeedServer.GetSelfFeed", in)
	out := new(GetFeedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServerService) PushSelfFeed(ctx context.Context, in *PushSelfFeedRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "FeedServer.PushSelfFeed", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServerService) GetFollowFeed(ctx context.Context, in *GetFeedRequest, opts ...client.CallOption) (*GetFeedResponse, error) {
	req := c.c.NewRequest(c.name, "FeedServer.GetFollowFeed", in)
	out := new(GetFeedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServerService) PushFollowFeed(ctx context.Context, opts ...client.CallOption) (FeedServer_PushFollowFeedService, error) {
	req := c.c.NewRequest(c.name, "FeedServer.PushFollowFeed", &PushFollowFeedRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &feedServerServicePushFollowFeed{stream}, nil
}

type FeedServer_PushFollowFeedService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PushFollowFeedRequest) error
}

type feedServerServicePushFollowFeed struct {
	stream client.Stream
}

func (x *feedServerServicePushFollowFeed) Close() error {
	return x.stream.Close()
}

func (x *feedServerServicePushFollowFeed) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *feedServerServicePushFollowFeed) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *feedServerServicePushFollowFeed) Send(m *PushFollowFeedRequest) error {
	return x.stream.Send(m)
}

func (c *feedServerService) FollowAfterFeed(ctx context.Context, in *ActionFeedRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "FeedServer.FollowAfterFeed", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServerService) UnfollowAfterFeed(ctx context.Context, in *ActionFeedRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "FeedServer.UnfollowAfterFeed", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeedServer service

type FeedServerHandler interface {
	Refresh(context.Context, *ReFreshRequest, *EmptyResponse) error
	GetSelfFeed(context.Context, *GetFeedRequest, *GetFeedResponse) error
	PushSelfFeed(context.Context, *PushSelfFeedRequest, *EmptyResponse) error
	GetFollowFeed(context.Context, *GetFeedRequest, *GetFeedResponse) error
	PushFollowFeed(context.Context, FeedServer_PushFollowFeedStream) error
	FollowAfterFeed(context.Context, *ActionFeedRequest, *EmptyResponse) error
	UnfollowAfterFeed(context.Context, *ActionFeedRequest, *EmptyResponse) error
}

func RegisterFeedServerHandler(s server.Server, hdlr FeedServerHandler, opts ...server.HandlerOption) error {
	type feedServer interface {
		Refresh(ctx context.Context, in *ReFreshRequest, out *EmptyResponse) error
		GetSelfFeed(ctx context.Context, in *GetFeedRequest, out *GetFeedResponse) error
		PushSelfFeed(ctx context.Context, in *PushSelfFeedRequest, out *EmptyResponse) error
		GetFollowFeed(ctx context.Context, in *GetFeedRequest, out *GetFeedResponse) error
		PushFollowFeed(ctx context.Context, stream server.Stream) error
		FollowAfterFeed(ctx context.Context, in *ActionFeedRequest, out *EmptyResponse) error
		UnfollowAfterFeed(ctx context.Context, in *ActionFeedRequest, out *EmptyResponse) error
	}
	type FeedServer struct {
		feedServer
	}
	h := &feedServerHandler{hdlr}
	return s.Handle(s.NewHandler(&FeedServer{h}, opts...))
}

type feedServerHandler struct {
	FeedServerHandler
}

func (h *feedServerHandler) Refresh(ctx context.Context, in *ReFreshRequest, out *EmptyResponse) error {
	return h.FeedServerHandler.Refresh(ctx, in, out)
}

func (h *feedServerHandler) GetSelfFeed(ctx context.Context, in *GetFeedRequest, out *GetFeedResponse) error {
	return h.FeedServerHandler.GetSelfFeed(ctx, in, out)
}

func (h *feedServerHandler) PushSelfFeed(ctx context.Context, in *PushSelfFeedRequest, out *EmptyResponse) error {
	return h.FeedServerHandler.PushSelfFeed(ctx, in, out)
}

func (h *feedServerHandler) GetFollowFeed(ctx context.Context, in *GetFeedRequest, out *GetFeedResponse) error {
	return h.FeedServerHandler.GetFollowFeed(ctx, in, out)
}

func (h *feedServerHandler) PushFollowFeed(ctx context.Context, stream server.Stream) error {
	return h.FeedServerHandler.PushFollowFeed(ctx, &feedServerPushFollowFeedStream{stream})
}

type FeedServer_PushFollowFeedStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*PushFollowFeedRequest, error)
}

type feedServerPushFollowFeedStream struct {
	stream server.Stream
}

func (x *feedServerPushFollowFeedStream) Close() error {
	return x.stream.Close()
}

func (x *feedServerPushFollowFeedStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *feedServerPushFollowFeedStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *feedServerPushFollowFeedStream) Recv() (*PushFollowFeedRequest, error) {
	m := new(PushFollowFeedRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *feedServerHandler) FollowAfterFeed(ctx context.Context, in *ActionFeedRequest, out *EmptyResponse) error {
	return h.FeedServerHandler.FollowAfterFeed(ctx, in, out)
}

func (h *feedServerHandler) UnfollowAfterFeed(ctx context.Context, in *ActionFeedRequest, out *EmptyResponse) error {
	return h.FeedServerHandler.UnfollowAfterFeed(ctx, in, out)
}
